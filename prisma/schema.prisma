// prisma/schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    DESIGNER
    CUSTOMER
}

enum ProductStatus {
    DRAFT
    ACTIVE
    ARCHIVED
}

enum AssetType {
    IMAGE
    PSD
    AI
    SVG
    FONT
    VIDEO
    ZIP
    OTHER
    PNG
}

enum BillingPeriod {
    MONTHLY
    YEARLY
}

enum SubscriptionStatus {
    TRIALING
    ACTIVE
    PAST_DUE
    CANCELED
    INACTIVE
}

enum PaymentMethod {
    CARD
    PIX
    BOLETO
}

enum Provider {
    MERCADO_PAGO
    PAGBANK
    OTHER
}

enum OrderType {
    SUBSCRIPTION_INITIAL
    RENEWAL
    ONE_OFF
}

enum OrderStatus {
    PENDING
    PAID
    CANCELED
    REFUNDED
}

enum InvoiceStatus {
    OPEN
    PAID
    VOID
    CANCELED
}

enum PaymentStatus {
    PENDING
    APPROVED
    DECLINED
    REFUNDED
    CHARGED_BACK
}

enum EntitlementSource {
    SUBSCRIPTION
    MANUAL
    ORDER
}

enum WebhookStatus {
    RECEIVED
    PROCESSED
    FAILED
}

enum OrderItemType {
    PLAN
    PRODUCT
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String?
    cpf       String?  @unique
    password  String?
    role      Role     @default(CUSTOMER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subscriptions Subscription[]
    orders        Order[]
    entitlements  UserEntitlement[]
    customerLinks CustomerProvider[]
    Account       Account[]
    Session       Session[]
}

model Category {
    id          String   @id @default(cuid())
    name        String
    slug        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    products ProductCategory[]
}

model Product {
    id          String        @id @default(cuid())
    name        String
    slug        String        @unique
    description String?
    status      ProductStatus @default(DRAFT)
    isPublic    Boolean       @default(false)

    // Campos para imagens
    mainImage String? // URL ou base64 da imagem principal
    images    Json? // Array de imagens adicionais [{"url": "...", "label": "..."}]

    // Campos para arquivos de download
    arquivoPdf String? // URL do arquivo PDF
    arquivoPng String? // URL do arquivo PNG
    arquivoPsd String? // URL do arquivo PSD

    metadata  Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    categories   ProductCategory[]
    assets       DesignAsset[]
    plans        PlanProduct[]
    entitlements UserEntitlement[]
    orderItems   OrderItem[]
}

model ProductCategory {
    product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId  String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String

    @@id([productId, categoryId])
    @@index([categoryId])
}

model DesignAsset {
    id         String    @id @default(cuid())
    product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId  String
    label      String?
    uri        String
    type       AssetType
    sizeBytes  BigInt?
    width      Int?
    height     Int?
    checksum   String?
    previewUri String?
    createdAt  DateTime  @default(now())

    @@index([productId])
}

model Plan {
    id            String        @id @default(cuid())
    name          String
    slug          String        @unique
    description   String?
    billingPeriod BillingPeriod
    priceCents    Int
    currency      String        @default("BRL")
    active        Boolean       @default(true)
    trialDays     Int           @default(0)
    metadata      Json?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    products      PlanProduct[]
    subscriptions Subscription[]
    orderItems    OrderItem[]
}

model PlanProduct {
    plan      Plan    @relation(fields: [planId], references: [id], onDelete: Cascade)
    planId    String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String

    @@id([planId, productId])
    @@index([productId])
}

model Subscription {
    id                     String             @id @default(cuid())
    user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                 String
    plan                   Plan               @relation(fields: [planId], references: [id], onDelete: Restrict)
    planId                 String
    status                 SubscriptionStatus @default(TRIALING)
    paymentMethod          PaymentMethod
    provider               Provider
    providerSubscriptionId String?
    startAt                DateTime           @default(now())
    currentPeriodStart     DateTime
    currentPeriodEnd       DateTime
    cancelAtPeriodEnd      Boolean            @default(false)
    canceledAt             DateTime?
    metadata               Json?
    createdAt              DateTime           @default(now())
    updatedAt              DateTime           @updatedAt

    orders       Order[]
    entitlements UserEntitlement[]

    @@unique([provider, providerSubscriptionId])
    @@index([userId])
    @@index([planId])
    @@index([status])
    @@index([currentPeriodEnd])
}



model Payment {
    id                String        @id @default(cuid())
    invoice           Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId         String
    provider          Provider
    method            PaymentMethod
    status            PaymentStatus @default(PENDING)
    amountCents       Int
    paidAt            DateTime?
    providerPaymentId String?
    providerRaw       Json?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt

    webhookEvents WebhookEvent[]

    @@unique([provider, providerPaymentId])
    @@index([invoiceId])
    @@index([status])
    @@index([provider])
}

model UserEntitlement {
    id             String            @id @default(cuid())
    user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    product        Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId      String
    source         EntitlementSource
    subscription   Subscription?     @relation(fields: [subscriptionId], references: [id])
    subscriptionId String?
    order          Order?            @relation(fields: [orderId], references: [id])
    orderId        String?
    expiresAt      DateTime?
    createdAt      DateTime          @default(now())
    updatedAt      DateTime          @updatedAt

    @@unique([userId, productId, source, subscriptionId, orderId])
    @@index([userId])
    @@index([productId])
}




model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}